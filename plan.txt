[0m[1mdata.aws_iam_policy_document.codebuild_policy: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.codebuild_policy: Read complete after 0s [id=1229436035][0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-2][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 1s [id=851725420958][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_codestarconnections_connection.codestar_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_codestarconnections_connection" "codestar_connection" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m connection_status = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "github-connection"
      [32m+[0m[0m provider_type     = "GitHub"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Project" = "Test-Project"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Project" = "Test-Project"
        }
    }

[1m  # aws_iam_policy.codebuild_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "codebuild_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "A policy for codebuild to write to cloudwatch, s3, and access SSM"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "codebuild-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudwatch:*",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Get*",
                          [32m+[0m[0m "s3:PutBucketVersioning",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:UpdateObject",
                          [32m+[0m[0m "s3:PutEncryptionConfiguration",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutBucketPublicAccessBlock",
                          [32m+[0m[0m "s3:CreateBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::artifact-bucket",
                          [32m+[0m[0m "arn:aws:s3:::artifact-bucket/*",
                          [32m+[0m[0m "arn:aws:s3:::boilerplate-frontend",
                          [32m+[0m[0m "arn:aws:s3:::boilerplate-frontend/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecs:CreateCluster",
                          [32m+[0m[0m "ecs:CreateService",
                          [32m+[0m[0m "ecs:DeleteCluster",
                          [32m+[0m[0m "ecs:DeleteService",
                          [32m+[0m[0m "ecs:DeregisterTaskDefinition",
                          [32m+[0m[0m "ecs:Describe*",
                          [32m+[0m[0m "ecs:PutClusterCapacityProviders",
                          [32m+[0m[0m "ecs:RegisterTaskDefinition",
                          [32m+[0m[0m "ecs:UpdateCluster",
                          [32m+[0m[0m "ecs:UpdateService",
                          [32m+[0m[0m "ecs:TagResource",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:DescribeRepositories",
                          [32m+[0m[0m "ecr:CreateRepository",
                          [32m+[0m[0m "ecr:ListTagsForResource",
                          [32m+[0m[0m "ecr:TagResource",
                          [32m+[0m[0m "ecr:SetRepositoryPolicy",
                          [32m+[0m[0m "ecr:GetRepositoryPolicy",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:GetParameters",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ssm:us-east-2:851725420958:parameter/proj1/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudfront:CreateInvalidation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:cloudfront::851725420958:distribution/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_policy.codepipeline_execution_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "codepipeline_execution_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "A policy with permissions for codepipeline to start builds, access SSM, CloudWatch, and S3"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "codepipeline-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "codebuild:StartBuild",
                          [32m+[0m[0m "codebuild:BatchGetBuilds",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "codestar-connections:PassConnection",
                          [32m+[0m[0m "codestar-connections:UseConnection",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "codestar_connection_arn"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudwatch:*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:Get*",
                          [32m+[0m[0m "s3:PutBucketVersioning",
                          [32m+[0m[0m "s3:List*",
                          [32m+[0m[0m "s3:UpdateObject",
                          [32m+[0m[0m "s3:PutEncryptionConfiguration",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutBucketPublicAccessBlock",
                          [32m+[0m[0m "s3:CreateBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:s3:::artifact-bucket/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:GetParameters",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ssm:us-east-2:851725420958:parameter/proj1/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_policy.ecs_task_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "ecs_task_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "A policy for ECS task role to access S3, CloudWatch, SSM, ECR, and Secrets Manager"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "appexample-dev-ecs-task-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::app-user",
                          [32m+[0m[0m "arn:aws:s3:::app-user/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:GetParameters",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ssm:us-east-2:851725420958:parameter/proj1/*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_role.codebuild_project_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codebuild_project_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "codebuild-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.codepipeline_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codepipeline_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "appexample-dev-codepipeline-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.ecs_task_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ecs-task-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.codebuild_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "codebuild_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "codebuild-role"
    }

[1m  # aws_iam_role_policy_attachment.codepipeline_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "codepipeline_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "appexample-dev-codepipeline-role"
    }

[1m  # aws_iam_role_policy_attachment.ecs_task_role_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_task_role_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "ecs-task-role"
    }

[1m  # module.ALB.aws_lb.ALB[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "ALB" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "Load-Balancer"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags_all                                                     = (known after apply)
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)

      [32m+[0m[0m subnet_mapping (known after apply)
    }

[1m  # module.ALB.aws_lb_listener.listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m certificate_arn   = "arn:aws:acm:us-east-1:851725420958:certificate/f16abb7d-cc4f-47aa-91a1-86fd719b1fa5"
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 443
      [32m+[0m[0m protocol          = "HTTPS"
      [32m+[0m[0m ssl_policy        = "ELBSecurityPolicy-TLS13-1-2-2021-06"
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # module.ALB.aws_lb_target_group.target_group[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "target_group" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "Backend"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 3000
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 2
          [32m+[0m[0m interval            = 120
          [32m+[0m[0m matcher             = (known after apply)
          [32m+[0m[0m path                = "/api/health"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 3
        }

      [32m+[0m[0m stickiness (known after apply)

      [32m+[0m[0m target_failover (known after apply)

      [32m+[0m[0m target_group_health (known after apply)

      [32m+[0m[0m target_health_state (known after apply)
    }

[1m  # module.ALB_SG.aws_security_group.SG[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "SG" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "ALB-SG"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.RDS_SG.aws_security_group.SG[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "SG" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 5432
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5432
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "RDS-SG"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.S3_Frontend.aws_s3_bucket.frontend[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "frontend" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "boilerplate-frontend"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Name" = "S3-boilerplate-frontend"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Name" = "S3-boilerplate-frontend"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.S3_Frontend.aws_s3_bucket_acl.acl_public_read[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "acl_public_read" {
      [32m+[0m[0m acl    = "public-read"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m access_control_policy (known after apply)
    }

[1m  # module.S3_Frontend.aws_s3_bucket_ownership_controls.example[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "example" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerPreferred"
        }
    }

[1m  # module.S3_Frontend.aws_s3_bucket_policy.frontend_s3_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "frontend_s3_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.S3_Frontend.aws_s3_bucket_public_access_block.example[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "example" {
      [32m+[0m[0m block_public_acls       = false
      [32m+[0m[0m block_public_policy     = false
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = false
      [32m+[0m[0m restrict_public_buckets = false
    }

[1m  # module.backend_SG.aws_security_group.SG[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "SG" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m from_port        = 3000
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3000
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "Backend-SG"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.backend_pipeline.aws_codepipeline.pipeline[0m will be created
[0m  [32m+[0m[0m resource "aws_codepipeline" "pipeline" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m execution_mode = "SUPERSEDED"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "backend-pipeline"
      [32m+[0m[0m pipeline_type  = "V1"
      [32m+[0m[0m role_arn       = (known after apply)
      [32m+[0m[0m tags_all       = (known after apply)

      [32m+[0m[0m artifact_store {
          [32m+[0m[0m location = (known after apply)
          [32m+[0m[0m type     = "S3"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Source"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Source"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m name             = "Source"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeStarSourceConnection"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Apply"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Build"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m input_artifacts  = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m name             = "Build"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "build_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeBuild"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }

      [32m+[0m[0m trigger (known after apply)
    }

[1m  # module.bastion_host.aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-037774efca2da0726"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "bastion-key-pair"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags_all                             = (known after apply)
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device (known after apply)
    }

[1m  # module.bastion_host.aws_key_pair.bastion_key[0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "bastion_key" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = "bastion-key-pair"
      [32m+[0m[0m key_name_prefix = (known after apply)
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
    }

[1m  # module.bastion_host.aws_security_group.bastion_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my_bastion_host-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my_bastion_host-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.bastion_host.null_resource.save_key_pair[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "save_key_pair" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.bastion_host.tls_private_key.bastion[0m will be created
[0m  [32m+[0m[0m resource "tls_private_key" "bastion" {
      [32m+[0m[0m algorithm                     = "RSA"
      [32m+[0m[0m ecdsa_curve                   = "P224"
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m private_key_openssh           = (sensitive value)
      [32m+[0m[0m private_key_pem               = (sensitive value)
      [32m+[0m[0m private_key_pem_pkcs8         = (sensitive value)
      [32m+[0m[0m public_key_fingerprint_md5    = (known after apply)
      [32m+[0m[0m public_key_fingerprint_sha256 = (known after apply)
      [32m+[0m[0m public_key_openssh            = (known after apply)
      [32m+[0m[0m public_key_pem                = (known after apply)
      [32m+[0m[0m rsa_bits                      = 4096
    }

[1m  # module.cloudfront.aws_cloudfront_distribution.frontend_distribution[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_distribution" "frontend_distribution" {
      [32m+[0m[0m aliases                         = [
          [32m+[0m[0m "demo.simplisti.cc",
        ]
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m caller_reference                = (known after apply)
      [32m+[0m[0m continuous_deployment_policy_id = (known after apply)
      [32m+[0m[0m default_root_object             = "index.html"
      [32m+[0m[0m domain_name                     = (known after apply)
      [32m+[0m[0m enabled                         = true
      [32m+[0m[0m etag                            = (known after apply)
      [32m+[0m[0m hosted_zone_id                  = (known after apply)
      [32m+[0m[0m http_version                    = "http2"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m in_progress_validation_batches  = (known after apply)
      [32m+[0m[0m is_ipv6_enabled                 = true
      [32m+[0m[0m last_modified_time              = (known after apply)
      [32m+[0m[0m price_class                     = "PriceClass_All"
      [32m+[0m[0m retain_on_delete                = false
      [32m+[0m[0m staging                         = false
      [32m+[0m[0m status                          = (known after apply)
      [32m+[0m[0m tags_all                        = (known after apply)
      [32m+[0m[0m trusted_key_groups              = (known after apply)
      [32m+[0m[0m trusted_signers                 = (known after apply)
      [32m+[0m[0m wait_for_deployment             = true

      [32m+[0m[0m custom_error_response {
          [32m+[0m[0m error_code         = 404
          [32m+[0m[0m response_code      = 200
          [32m+[0m[0m response_page_path = "/index.html"
        }

      [32m+[0m[0m default_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
              [32m+[0m[0m "OPTIONS",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
              [32m+[0m[0m "OPTIONS",
            ]
          [32m+[0m[0m compress               = false
          [32m+[0m[0m default_ttl            = 3600
          [32m+[0m[0m max_ttl                = 86400
          [32m+[0m[0m min_ttl                = 0
          [32m+[0m[0m target_origin_id       = "S3Origin"
          [32m+[0m[0m trusted_key_groups     = (known after apply)
          [32m+[0m[0m trusted_signers        = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "allow-all"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = (known after apply)
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward           = "none"
                  [32m+[0m[0m whitelisted_names = (known after apply)
                }
            }
        }

      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = (known after apply)
          [32m+[0m[0m origin_id                = "S3Origin"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m restrictions {
          [32m+[0m[0m geo_restriction {
              [32m+[0m[0m locations        = (known after apply)
              [32m+[0m[0m restriction_type = "none"
            }
        }

      [32m+[0m[0m viewer_certificate {
          [32m+[0m[0m acm_certificate_arn      = "arn:aws:acm:us-east-1:851725420958:certificate/f16abb7d-cc4f-47aa-91a1-86fd719b1fa5"
          [32m+[0m[0m minimum_protocol_version = "TLSv1.2_2021"
          [32m+[0m[0m ssl_support_method       = "sni-only"
        }
    }

[1m  # module.codebuild.aws_codebuild_project.this[0m will be created
[0m  [32m+[0m[0m resource "aws_codebuild_project" "this" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m badge_enabled        = false
      [32m+[0m[0m badge_url            = (known after apply)
      [32m+[0m[0m build_timeout        = 60
      [32m+[0m[0m description          = (known after apply)
      [32m+[0m[0m encryption_key       = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m name                 = "Test-Project-codebuild"
      [32m+[0m[0m project_visibility   = "PRIVATE"
      [32m+[0m[0m public_project_alias = (known after apply)
      [32m+[0m[0m queued_timeout       = 480
      [32m+[0m[0m service_role         = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)

      [32m+[0m[0m artifacts {
          [32m+[0m[0m encryption_disabled    = false
          [32m+[0m[0m override_artifact_name = false
          [32m+[0m[0m type                   = "CODEPIPELINE"
        }

      [32m+[0m[0m environment {
          [32m+[0m[0m compute_type                = "BUILD_GENERAL1_SMALL"
          [32m+[0m[0m image                       = "aws/codebuild/standard:5.0"
          [32m+[0m[0m image_pull_credentials_type = "CODEBUILD"
          [32m+[0m[0m privileged_mode             = false
          [32m+[0m[0m type                        = "LINUX_CONTAINER"
        }

      [32m+[0m[0m logs_config {
          [32m+[0m[0m cloudwatch_logs {
              [32m+[0m[0m group_name = "Proj-1"
              [32m+[0m[0m status     = "ENABLED"
            }
        }

      [32m+[0m[0m source {
          [32m+[0m[0m buildspec = "deploy/buildspec.yml"
          [32m+[0m[0m type      = "CODEPIPELINE"
        }
    }

[1m  # module.ecr.aws_ecr_repository.this[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "this" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "image"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # module.ecs_backend.aws_ecs_service.ecs_service[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "ecs_service" {
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 1
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m enable_execute_command             = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "Backend"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m task_definition                    = (known after apply)
      [32m+[0m[0m triggers                           = (known after apply)
      [32m+[0m[0m wait_for_steady_state              = false

      [32m+[0m[0m deployment_circuit_breaker {
          [32m+[0m[0m enable   = true
          [32m+[0m[0m rollback = true
        }

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "backend"
          [32m+[0m[0m container_port   = 3000
          [32m+[0m[0m target_group_arn = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = true
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = (known after apply)
        }

      [32m+[0m[0m service_connect_configuration {
          [32m+[0m[0m enabled = true

          [32m+[0m[0m service {
              [32m+[0m[0m port_name = "backend"

              [32m+[0m[0m client_alias {
                  [32m+[0m[0m dns_name = "backend"
                  [32m+[0m[0m port     = 8080
                }
            }
        }
    }

[1m  # module.ecs_cluster.aws_ecs_cluster.ecs_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "ecs_cluster" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "test-project"
      [32m+[0m[0m tags_all = (known after apply)

      [32m+[0m[0m setting (known after apply)
    }

[1m  # module.ecs_task_def_backend.aws_ecs_task_definition.ecs_task_def[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "ecs_task_def" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = (known after apply)
      [32m+[0m[0m cpu                      = "1024"
      [32m+[0m[0m execution_role_arn       = "arn:aws:iam::851725420958:role/ECSTaskExecutionRole"
      [32m+[0m[0m family                   = "Backend"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "2048"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m task_role_arn            = "arn:aws:iam::851725420958:role/ECSTaskExecutionRole"
      [32m+[0m[0m track_latest             = false
    }

[1m  # module.frontend_pipeline.aws_codepipeline.pipeline[0m will be created
[0m  [32m+[0m[0m resource "aws_codepipeline" "pipeline" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m execution_mode = "SUPERSEDED"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "frontend-pipeline"
      [32m+[0m[0m pipeline_type  = "V1"
      [32m+[0m[0m role_arn       = (known after apply)
      [32m+[0m[0m tags_all       = (known after apply)

      [32m+[0m[0m artifact_store {
          [32m+[0m[0m location = (known after apply)
          [32m+[0m[0m type     = "S3"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Source"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Source"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m name             = "Source"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeStarSourceConnection"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Apply"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Build"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m input_artifacts  = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m name             = "Build"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "build_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeBuild"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }

      [32m+[0m[0m trigger (known after apply)
    }

[1m  # module.rds_postgres.aws_db_instance.rds_instance[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "rds_instance" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = 20
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_name                               = "boilerplate"
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "postgres"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = "16.3"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "boilerplate"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = false
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "AppUser"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.rds_postgres.aws_db_subnet_group.rds_subnet_group[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "rds_subnet_group" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = (known after apply)
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name" = "RDS subnet group"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name" = "RDS subnet group"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.rds_postgres.aws_ssm_parameter.rds_hostname[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "rds_hostname" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/proj1/db_hostname"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "String"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.rds_postgres.aws_ssm_parameter.rds_password[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "rds_password" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/proj1/db_password"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "SecureString"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.rds_postgres.aws_ssm_parameter.rds_username[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "rds_username" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/proj1/db_username"
      [32m+[0m[0m tags_all       = (known after apply)
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "SecureString"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.rds_postgres.random_password.rds_password[0m will be created
[0m  [32m+[0m[0m resource "random_password" "rds_password" {
      [32m+[0m[0m bcrypt_hash      = (sensitive value)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m length           = 16
      [32m+[0m[0m lower            = true
      [32m+[0m[0m min_lower        = 0
      [32m+[0m[0m min_numeric      = 0
      [32m+[0m[0m min_special      = 0
      [32m+[0m[0m min_upper        = 0
      [32m+[0m[0m number           = true
      [32m+[0m[0m numeric          = true
      [32m+[0m[0m override_special = "!@#$%^&*()-_=+<>?"
      [32m+[0m[0m result           = (sensitive value)
      [32m+[0m[0m special          = true
      [32m+[0m[0m upper            = true
    }

[1m  # module.s3_app.aws_s3_bucket.terraform_state[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "terraform_state" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "app-user"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3_app.aws_s3_bucket_public_access_block.public_access_block[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "public_access_block" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.s3_app.aws_s3_bucket_server_side_encryption_configuration.encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "aws:kms"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # module.s3_app.aws_s3_bucket_versioning.versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.s3_artifact.aws_s3_bucket.terraform_state[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "terraform_state" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "artifact-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3_artifact.aws_s3_bucket_public_access_block.public_access_block[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "public_access_block" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.s3_artifact.aws_s3_bucket_server_side_encryption_configuration.encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "aws:kms"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # module.s3_artifact.aws_s3_bucket_versioning.versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.vpc.aws_eip.nat_gateway_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_gateway_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags_all = (known after apply)
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # module.vpc.aws_route.private_nat[0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_assoc[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_assoc[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_assoc" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private_subnets[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private_subnets[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnets[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.101.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnets[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnets" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.102.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags_all                             = (known after apply)
    }

[1mPlan:[0m 63 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
